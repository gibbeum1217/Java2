/*1.4 단일상속
다른 객체지향언어인 C++에서는 여러 조상 클래스로부터 상속받는 것이 가능한 '다중상속'을 허용하지만 자바에서는 단일 상속만을 허용한다.
그래서 하나 이상의 클래스로부터 상속을 받을 수 없다.
예를들면, TV클래스와 VCR클래스가 있을때, 이 두 클래스로부터 상속을 받는 TVCR클래스를 작성할 수 없다

그래서 TVCR클래스는 조상클래스로 TV클래스와 VCR클래스 중 하나만 선택해야 한다

class TVCR extends TV, VCR {  // 에러. 조상은 하나만 허용된다
 	
	
}

다중상속을 허용하면 여러 클래스로부터 상속받을 수 있기 때문에 복합적인 기능을 가진 클래스를 쉽게 작성할 수 있다는 장점이 있지만,
클래스간의 관계가 매우 복잡해진다는 것과 서로 다른 클래스로부터 상속받은 멤버간의 이름이 같은 경우 구별할 수 있는 방법이 없다는 단점을 가지고 있다.
    만일 다중상속을 허용해서 TVCR클래스가 TV클래스와 VCR클래스를 모두 조상으로 하여 두 클래스의 멤버들을 상속받는다고 가정해 보자.
    
    TV클래스에도 power()라는 메서드가 있고, VCR클래스에도 power()라는 메서드가 있을 때 자손인 TVCR클래스는 어느 조상클래스의 power()를 상속받게 되는 것일까
    둘다 상속받게 된다면, TVCR클래스 내에서 선언부(이름과 매개변수)만 같고 서로 다른 내용의 두 메서드를 어떻게 구별할 것인가?
    		이것을 해결하는 방법은 조상클래스의 메서드의 이름이나 매개변수를 바꾸는 방법 밖에 없다.
    		이렇게하면 그 조상클래스의 power()메서드를 사용하던 모든 클래스들도 변경을 해야하므로 그리 간단한 문제가 아니다.
    		자바에서는 다중상속의 이러한 문제점을 해결하기 위해 다중상속의 장점을 포기하고 단일상속만을 허용한다.
    		
*/


class Tv{
	
	boolean power;
	int channel;
	
	void power() {power =! power;}
	void channelUp() {++channel;}
	void channelDown() {--channel;}
}

class VCR{
	
	boolean power;
	int counter=0;
	void power() {power =! power;}
	void play() {}
	void stop() {}
	void rew() {}
	void ff() {}
	
}

public class TVCR extends Tv{  //자바는 다중상속을 허용하지 않으므로 Tv클래스를 조상으로 하고 VCR클래스는 TVCR클래스에 포함시켰다. 
	
	VCR vcr = new VCR(); // VCR클래스를 포함시켜서 사용한다. 


	void play() {
		//그리고 TVCR클래스에 VCR클래스의 메서드와 일치하는 선언부를 가진 메서드를 선언하고 내용은 VCR클래스의 것을 호출해서 사용하도록 했다.
		//외부적으로는 TVCR클래스의 인스턴스를 사용하는 것처럼 보이지만 내부적으로는 VCR클래스의 인스턴스를 생성해서 사용하는 것이다.
		//이렇게 함으로써 VCR클래스의 메서드의 내용이 변경되더라도 TVCR클래스의 메서드들 역시 변경된 내용이 적용되는 결과를 얻을 수 있을 것이다. 
		vcr.play();
	}
	
	void stop() {
		vcr.stop();
		
	}
	
	void rew() {
		vcr.rew();
		
	}
	void ff() {
		vcr.ff();
	}
	
}
