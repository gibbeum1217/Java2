/*6.1추상 클래스란?
		
		클래스를 설계도에 비유한다면, 추상클래스는 미완성 설계도에 비유할 수 있다
		미완성 설계도란, 단어의 뜻 그대로 완성되지 못한채로 남겨진 설계도를 말한다
		
		클래스가 미완성이라는 것은 멤버의 개수에 관계된 것이 아니라, 단지 미완성 메서드(추상메서드)를 포함하고 있다는 의미이다.
		미완성 설계도로 완성된 제품을 만들 수 없듯이 추상클래스로 인스턴스는 생성할 수 없다.
		추상클래스는 상속을 통해서 ★ 자손클래스에 의해서만 완성될 수 있다
		
		추상클래스 자체로는 클래스로서의 역할을 다 못하지만, 새로운 클래스를 작성하는 데 있어서 바탕이 되는 조상클래스로서 중요한 의미를 갖는다
		새로운 클래스를 작성할 때 아무것도 없는 상태에서 시작하는 것보다는 완전하지는 못하더라도 어느 정도 틀을 갖춘 상태에서 시작하는 것이 나을 것이다
		실생활에서 예를 들자면, 같은 크기의 TV라도 기능의 차이에 따라 여러 종류의 모델이 있지만, 사실 이들이 설계도는 아마 90%정도는 동일할 것이다.
		서로 다른 세 개의 설계도를 따로 그리는것보다는 이들의 공통부분만을 그린 미완성 설계도를 만들어 놓고, 이 미완성 설계도를 이용해서
		각각의 설계도를 완성하는 것이 훨씬 효율적일 것이다.
		추상클래스는 키워드 abstract를 붙이기만 하면 된다. 이렇게 함으로써 이 클래스를 사용할때, 클래스 선언부의 abstract를 보고
		이 클래스에는 추상메서드가 있으니 상속을 통해서 구현해주어야 한다는것을 쉽게 알 수 있을 것이다.abstract
		
		abstract class 클래스 이름{
	
	
	}

	추상클래스는 추상메서드를 포함하고 있다는 것을 제외하고는 일반클래스와 전혀 다르지 않다
	추상클래스에도 생성자가 있으며, 멤버변수와 메서드도 가질수 있다. 
	
	*
	*
	*6.2 추상메서드
	*메서드는 선언부와 구현부(몸통)로 구성되어 있다고 했다. 선언부만 작성하고 구현부는 작성하지 않은 채로 남겨 둔 것이 추상메서드이다
	*즉 설계만 해놓고 실쪠 수행될 내용은 작성하지 않았기 때문에 미완성 메서드인 것이다. 
	*메서드를 이와 같이 미완성 상태로 남겨 놓는 이유는 메서드의 내용이 상속받는 클래스에 따라 달라질 수 있기 때문에 조상 클래스에서는 선언부만을 작성하고, 주석을 덧붙여 어떤 기능을
	*수행할 목적으로 작성되었는지 알려 주고, 실제 내용은 상속받는 클래스에서 구현하도록 비워 두는 것이다
	*그래서 추상클래스를 상속받는 자손클래스는 조상의 추상메서드를 상황에 맞게 적절히 구현해주어야 한다
	*추상메서드 역시 키워드 abstract를 앞에 붙여 주고, 추상메서드는 구현부가 없으므로 괄호 {}대신 문장의 끝을 알리는 ;을 적어준다
	*
	*abstract 리턴타입 메서드이름();
	*
	*추상클래스로부터 상속받는 자손클래스는 오버라이딩을 통해 조상인 추상클래스의 추상 메서드를 모두 구현해주어야 한다.
	*★만일 조상으로부터 상속받는 추상메서드 중 하나라도 구현하지 않는다면, 자손클래스 역시 추상클래스로 지정해 주어야 한다.
	*
	*실제 작업내용인 구현부가 없는 메서드가 무슨 의미가 있을까 싶기도 하겠지만, 메서드를 작성할 때 실제 작업내용인 구현부보다 더 중요한 부분이 선언부이다. 
	*메서드의 이름과 메서드의 작업에 필요한 매개변수, 그리고 작업의 결과로 어떤 타입의 값을 반환할 것인가를 결정하는 것은 쉽지 않은 일이다
	*선언부만 작성해도 메서드의 절반 이상이 완성된 것이라 해도 과언이 아니다.
	*
	*메서드를 사용하는 쪽에서는 메서드가 실제로 어떻게 구현되어있는지 몰라도 메서드의 이름과 매개변수, 리턴타입, 즉 선언부만 알고 있으면 되므로
	*내용이 없을 지라도 추상메서드를 사용하는 코드를 작성하는 것이 가능하며, 실제로는 자손클래스에 구현된 완성된 메서드가 호출되도록 할 수 있다
	*
	*
	**/
	
/*	여러 클래스에 공통적으로 사용될 수 있는 클래스를 바로 작성하기도 하고, 기존의 클래스의 공통적인 부분을 뽑아서 추상클래스로 만들어 상속하도록 하는 경우도 있다
	추상의 사전적 정의는 다음과 같다. 낱낱의 구체적 표상이나 개념에서 공통된 성질을 뽑아 이를 일반적인 개념으로 파악하는 정신 작용
	
	상속이 자손 클래스를 만드는데 조상 클래스를 사용하는 것이라면, 이와 반대로 추상화는 기존의 클래스의 공통부분을 뽑아내서 조상 클래스를 만드는 것이라고 할 수 있다.
	추상화: 클래스간의 공통점을 찾아내서 공통의 조상을 만드는 작업
	구체화: 상속을 통해 클래스를 구현, 확장하는 작업
	
	아래에 Player라는 추상클래스를 작성해 보았다. 이 클래스는 VCR이나 Audio같은 재생 가능한 기기(Player)를 클래스로 작성할 때, 이들의 조상으로 사용 될 수 있을 것이다
	
	abstract class Player{
		
		
		booelan pause; // 일시정지상태를 저장하기 위한 변수
		int currentPos; // 현재 Play되고 있는 위치를 저장하기 위한 변수
		
		Player(){  // 추상 클래스도 생성자가 있어야 한다. 
			pause = false;
			currentPost = 0; 
		
		}
		
		abstract void play(int pos); // 저장된 위치(pos)에서 재생을 시작하는 기능이 수행하도록 작성되어야 한다
		
		abstract void stop(); // 재생을 즉시 멈추는 기능을 수행하도록 작성되어야 한다
		
		void play() {
			play(currentPos);
		}
		void pause() {
			if(pause) {  //pause가 true일 때에서 pause가 호출되면
				
				pause = false; //pause의 상태를 false로 바꾸고
				play(currentPos); //현재의 위치에서 play를 한다
			}else        //pause가 false일 때에서 pause가 호출되면
				pause = true; //pause의 상태를 true로 바꾸고
				stop();  //play를 멈춘다
		}
		
	}
*/

/*

이제 Player클래스를 조상으로 하는 CDPlayer 클래스를 만들어 보자

class CDPlayer extends Player{
	
	void play(int currentPos) {
		
	}
	
	void stop() {
		
		
	}
	
	int currentTrack;
	
	void nextTrack();
		currentTrack++;
		...
	}
	void preTracj() {
		if(currentTrack > 1) {
			currentTrack--;
		}
		...

	}
}
조상 클래스의 추상메서드를 CDPlayer클래스의 기능에 맞게 안성해주고, CDPlayer만의 새로운 기능들을 추가하였다

사실 Player클래스의 play(int pos)와 stop()을 추상 메서드로 하는 대신, 아무 내용도 없는 메서드로 작성할 수도 있다
아무런 내용도 없이 단지 괄호{}만 있어도, 추상메서드가 아닌 일반 메서드로 간주되기 때문이다.

이번엔 기존의 클래스로부터 공통된 부분을 뽑아내어 추상클래스를 만들어 보도록 하자.

class Marine{
	int x, y; //현재 위치
	void move(int x, int y) {}
	void stop() {}
	void stimPack() {}
}
class Tank{
	int x, y;
	void move(int x, int y) {}
	void stop() {}
	void changeMode() {}
	
}

class Dropship{
	int x, y;
	void move(int xm int y) {}
	void stop() {}
	void load() {}
	void unload() {}
}

유명한 컴퓨터 게임에 나오는 유닛들을 클래스로 간단히 정의해보았다
이 유닛들은 각자 나름대로의 기능을 가지고 있지만 공통부분을 뽑아내어 하나의 클래스로 만들고, 이 클래스로부터 상속받도록 변경해보자.

abstract class Unit{
	int x, y;
	abstract void move(int x, int y);
	void stop() {}
}
class Marie extends Unit{
	void move(int x, int y) {}
	void stimPack() {}
}

class Tank extends Unit{
	void move(int x, int y) {}
	void changeMode() {}
	
}

class Dropship extends Unit{
	
	void move(int x, int y) {}
	void load() {}
	void unload() {}
}



각 클래스의 공통부분을 뽑아내서 Unit클래스를 정의하고 이로부터 상속받도록 하였다
이 Unit클래스는 다른 유닛을 위한 클래스를 작성하는데 재활용 될 수 있을 것이다

이들 클래스에대해서 stop메서드는 선언부와 구현부 모두 공통적이지만,
Marine, Tank는 지상유니이고 Dropship은 공중유닛이기 때문에 이동하는 방법이 서로 달라서 move메서드의 실제 구현 내용이 다를 것이다
	그래도 move메서드의 선언부는 같기 때문에 추상메서드로 정의할 수 있다
	최대한의 공통부분을 뽑아내기 위한 것이기도 하지만, 모든 유닛은 이동할 수 있어야 하므로 Unit클래스에는 move메서드가 반드시 필요한 것이기 때문이다.
	
	move메서드가 추상메서드로 선언된것에는, 앞으로Unit클래스를 상속받아서 작성되는 클래스는 move메서드를 자신의 클래스에 알맞게 반드시 구현해야 한다는 의미가 담겨있는 것이긷 하다.
	
	Unit[] group = new Unit[4];
	group[0] = new Marine();
	group[1] = new Tank();
	group[2] = new Marine();
	group[3] = new Dropship();
	
	for(int i=0; i<group.length; i++)
		group[i].move(100, 200);
	
	위으 코드는 공통조상인 Unit클래스 타입의 참조변수 배열을 통해서 서로 다른 종류의 인스턴스를 하나의 묶음으로 다룰 수 있다는 것을 보여 주기 위한 것이다
	다형성에서 배웠드이 조상클래스타입의 참조변수로 자손 클래스의 인스턴스를 참조하는것이 가능하기 때문에 이처럼 조상 클래스타입의 배열에 자손 클래스의 인스턴스를 담을 수 있는것이다
	
	만일 이들 클래스간의 공통조상이 없었다면 이처럼 하나의 배열로 다룰 수 없을 것이다.
	
	Unit클래스에 move메서드가 비록 추상메서드로 정의되어 있다 하더라도 이처럼 Unit클래스 타입의 참조변수로 move메서드를 호출하는 것이 가능하다
	메서드는 참조변수의 타입에 관계없이 실제 인스턴스에 구현된 것이 호출되기 때문이다.
	
	group[i].move(100,200)과 같이 호출하는 것이 Unit클래스의 추상메서드인 move를 호출하는 것 같이 보이지만
	실제로는 이 추상메서드가 구현된 Marine, Tank, Dropship인스턴스의 메서드가 호출되는 것이다
	
	*/


package abstractclass;


public class abstractclass {

}
