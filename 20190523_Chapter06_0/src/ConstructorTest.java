/*지금까지는 생성자를 모르고도 프로그래밍을 해왔지만, 사실 모든 클래스에는 반드시 하나 이상의 생성자가 정의되어 있어야 한다
  그러나 지금까지 클래스에 생성자를 정의하지않고도 인스턴스를 생성할수 있었던 이유는
  컴파일러가 제공하는 '기본 생성자'덕분이었디
  
  컴파일할때, 소스 파일(*.java)의 클래스에 생성자가 하나도 정의되지 않은 경우 컴파일러는 자동적으로 아래와 같은 내용의 기본 생성자를 추가하여 컴파일 한다
  
  클래스이름() {}
 Card(){}

컴파일러가 자동적으로 추가해주는 기본 생성자는 이와 같이 매개변수도 없고 아무런 내용도 없는 아주 간단한 것이다.*/

class Data1{
	int value;
}

class Data2{
	int value;
	
	Data2(int x){
		value =x;
	}
	
}
public class ConstructorTest {
	public static void main(String[] args) {
		Data1 d1 = new Data1();
		Data2 d2 = new Data2();
	}
}


// 이 예제를 컴파일하면 에러메시지가 나타난다. 이것은 Data2에서 Data2()라는 생성자를 찾을 수 없다는 내용의 에러메시지인데,
//Data2에 생성자 Data2()가 정의되어 있지 않기 때문에 에러가 발생한 것이다.

//Data1의 인스턴스를 생성하는 코드에는 에러가 없는데, Data2의 인스턴스를 생성하는 코드에서 에러가 발생하는 이유는 무엇일까?

//그 이유는 Data1에는 정의되어 있는 생성자가 하나도 없으므로 컴파일러가 기본생성자를 추가해주었지만,
//Data2에는 이미 생성자 Data2(int x)가 정의되어있으므로 기본 생성자가 추가되지 않았기 때문이다.

//컴파일러가 자동적으로 기본 생성자를 추가해주는 경우는 '클래스내에생성자가 하나도 없을때'뿐이라는 것을 명심해야 한다.



//이 예제에서 컴파일 에러가 발생하지 않도록 하기 위해서는 오른쪽 코드와 같이 Data2의 인스턴스를 생성할대 생성자 Data2(int x)를 사용하던가,
//아니면 클래스 Data2에 생성자 Data2()를 추가로 정의해주먄 된다

//Data1 d1 = new Data1();              ->      Data1 d1 = new Data1();
//Data2 d2 = new Data2(); //에러                   ->      Data2 d2 = new Data2(10); //OK!